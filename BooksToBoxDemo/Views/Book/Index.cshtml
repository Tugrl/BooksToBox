@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager
@model BooksToBoxDemo.Models.ViewModels.BookDetailsViewModel
@{
    ViewData["Title"] = Model.BookName;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if (Model != null)
            {
                <h1 class="mb-3">@Model.BookName</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                </div>
                <div class="mb-3">
                    @if (signInManager.IsSignedIn(User))
                    {
                        if (Model.IsLiked)
                        {
                            <a style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up-fill"></i>
                            </a>
                        }
                        else
                        {
                            <a id="btnLike" style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </a>
                        }

                    }
                    <span id="totalLikes">@Model.TotalLikes</span> Likes
                </div>
                <div class="mb-3 d-flex">
                    @foreach (var categories in Model.Categories)
                    {
                        <span class="badge bg-secondary me-1">@categories.CategoryName</span>
                    }
                </div>
                <img src="@Model.BookImage" class="d-block img-fluid mb-3" />

                <div class="card">
                    <div class="card-header">
                        <h5>Comments</h5>
                        @if (signInManager.IsSignedIn(User))
                        {
                            <form method="post">
                                <div class="mb-3">
                                    <label class="form-label">Comment Description</label>
                                    <input type="text" class="form-control" asp-for="CommentDescription" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-dark">Submit</button>
                                    <input type="hidden" asp-for="BookID" />

                                </div>
                            </form>
                        }
                    </div>
                    <div class="card-body">
                        @if (Model.Comments != null && Model.Comments.Any())
                        {
                            @foreach (var comment in Model.Comments.Reverse())
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div>
                                            @comment.Description
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span class="text-secondary">@comment.Username</span>
                                            <span class="text-secondary">@comment.DateAdded.ToShortDateString()</span>
                                        </div>
                                    </div>
                                </div>
                            }

                        }
                    </div>
                </div>

            }
            else
            {
                <p>Book Not Found!</p>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const btnLikeElement = document.getElementById('btnLike');
        const totalLikes = document.getElementById('totalLikes');
        async function getTotalLikes() {
            fetch('/api/BookLike/@Model.BookID/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(data => data.json())
                .then(result => totalLikes.innerHTML = result);
        }
        async function addLikeForBook() {
            fetch('/api/BookLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    BookId: '@Model.BookID',
                    UserId: '@userManager.GetUserId(User)'
                })

            }).then(() => {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                btnLikeElement.removeEventListener('click', addLikeForBook);
                getTotalLikes();
            });

        }

        btnLikeElement.addEventListener('click', addLikeForBook);
    </script>
}